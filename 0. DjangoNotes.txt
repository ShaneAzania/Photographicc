

*****************************************************************************************************
Start************************************************************************************************

CREATE ENVIRONMENT:
python3 -m venv djangoPy3Env

ACTIVATE ENVIRONMENT:
source djangoPy3Env/bin/activate

INSTALL DJANGO:
pip install Django==2.2.4

CREATE AND CD TO PROJECT FOLDER:
> cd projects/
projects> django-admin startproject project_name

CD TO project_name AND RUN PROJECT:
projects> cd project_name
project_name> python manage.py runserver

*****************************************************************************************************
Add apps*********************************************************************************************

project_name> python manage.py startapp app_name

add 'app_name' to INSTALLED_APPS in settings.py

*****************************************************************************************************
Routing with Parameters**********************************************************************************

# in urls
urlpatterns = [
        path('bears', views.one_method),                        # would only match localhost:8000/bears
        path('bears/<int:my_val>', views.another_method),       # would match localhost:8000/bears/23
        path('bears/<str:name>/poke', views.yet_another),       # would match localhost:8000/bears/pooh/poke
    	path('<int:id>/<str:color>', views.one_more),           # would match localhost:8000/17/brown
]

# in views

def one_method(request):                # no values passed via URL
    pass                                
    
def another_method(request, my_val):	# my_val would be a number from the URL
    pass                                # given the example above, my_val would be 23
    
def yet_another(request, name):	        # name would be a string from the URL
    pass                                # given the example above, name would be 'pooh'
    
def one_more(request, id, color): 	# id would be a number, and color a string from the URL
    pass                                # given the example above, id would be 17 and color would be 'brown'

*****************************************************************************************************
HTTP Response Types**********************************************************************************

from django.shortcuts import render, redirect
from django.http import HttpResponse, JsonResponse

def root_method(request):
    return HttpResponse("String response from root_method")
def another_method(request):
    return redirect("/redirected_route")
def redirected_method(request):
    return JsonResponse({"response": "JSON response from redirected_method", "status": True})

*****************************************************************************************************
Templates Render*************************************************************************************

from django.shortcuts import render

def index(request):
    context = {
    	"name": "Noelle",
    	"favorite_color": "turquoise",
    	"pets": ["Bruce", "Fitz", "Georgie"]
    }
    return render(request, "index.html", context)

Note: You cannot use SQUARE BRACKETS with Django's template engine! Instead, use dot notation. 
    For example, array[0] becomes {{ array.0 }}

*****************************************************************************************************
Static Files*****************************************************************************************

<!DOCTYPE html>
  <html>
    <head>
      <meta charset="utf-8">
      <title>Index</title>
      {% load static %}
      <link rel="stylesheet" href="{% static 'css/style.css' %}">    
      <script src="{% static 'js/script.js' %}"></script>
    </head>
    <body>
    	<img src="{% static 'images/image.jpg' %}" />
    </body>

*****************************************************************************************************
Get/Post Requests and Forms**************************************************************************

# In a view:

from django.shortcuts import render, redirect
def some_function(request):
    if request.method == "GET":
    	print(request.GET)
    if request.method == "POST":
        print(request.POST)

def some_other_function(request):
    if request.method == "POST":
        val_from_field_one = request.POST["one"]
    	val_from_field_two = request.POST["two"]


# Forms being submitted as POST requests must include a CSRF token.

<form action="/some_route" method="post">
  {% csrf_token %}
  <p>Field One: <input name="one" type="text"></p>
  <p>Field Two: <input name="two" type="text"></p>
  <button type="submit">Submit</button>
</form>

*****************************************************************************************************
Session**********************************************************************************************

# Make sessions available | migrate | in terminal input this

(djangoPy3Env) project_name> python manage.py migrate

#Useful session methods:

request.session['key']
    This will retrieve (get) the value associated with 'key'

request.session['key'] = 'value'
    Set the value that will be stored by 'key' to 'value'

'key' in request.session
    Returns a boolean of whether a key is in session or not

{{ request.session.name }}
    Use dot notation (.) to access request.session keys from templates since square brackets ([]) aren’t allowed there

del request.session['key']
    Deletes a session key if it exists, throws a KeyError if it doesn’t. Use along with try and except since it's better to ask for forgiveness than permission

Note: If you are storing a list in session that is being modified (such as an append), you will need to save the session after the append, like so:
    request.session['my_list'] = []
    request.session['my_list'].append("new item")
    request.session.save()

*****************************************************************************************************
Named Routes*****************************************************************************************
#### NAME ALL ROUTES!!!! ####

# in app's urls.py

from django.urls import path
from . import views

#APP NAME
app_name = 'name_of_app'

# ADD ( name ) variable to each path to name each route
urlpatterns = [
    path('', views.toindex, name='my_index'),
    path('this_app/new', views.new, name='my_new'),
    path('this_app/<int:id>/edit', views.edit, name='my_edit'),
    path('this_app/<int:id>/delete', views.delete, name='my_delete'),
    path('this_app/<int:id>', views.show, name='my_show'),
]

# in template

<a href="/target/this_app/new"></a>
    <!-- is the equivalent of:  -->
<a href="{% url 'name_of_app:my_new' %}"></a>
    <!-- This form's action attribute -->

<form class="" action="/target/this_app/5/delete" method="post">
  <input type="submit" value="Submit">
</form>
    <!-- is the equivalent of: -->
<form class="" action="{% url 'name_of_app:my_delete' id=5 %}" method="post">
  <input type="submit" value="Submit">
</form>


*****************************************************************************************************
Models***********************************************************************************************

# in models.py of app folder

from django.db import models
    
class Movie(models.Model):
    title = models.CharField(max_length=45)
    description = models.TextField()
    release_date = models.DateTimeField()
    duration = models.IntegerField()
    price = models.DecimalField(max_digits=None, decimal_places=None)
    price2 = models.FloatField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

# in terminal

python manage.py makemigrations
python manage.py migrate

# A Few Notes:
Never delete migration files and always makemigrations and migrate anytime you change something in your models.py files – that's what updates the actual database so it reflects what's in your models.

For now we are going to be using SQLite, a SQL database that comes pre-packaged with Django. It is best used in a development environment because it is stored as local memory in a file and as such is very fast. It is generally not recommended for use once our application is ready for production. Luckily, changing what kind of database we are using is quite simple. In the deployment section, we'll learn how to switch to a MySQL database.

Django ORM models and queries will always be the same no matter which database we are using.

*****************************************************************************************************
Django Shell*****************************************************************************************

# in terminal

> python manage.py shell

# in Shell

from your_app_name_here.models import ClassName


*****************************************************************************************************
ORM (Object-Relational Mapper) CRUD Commands*********************************************************

# Creating a new record
    ClassName.objects.create(field1="value for field1", field2="value for field2", etc.)

# Reading existing records
    Methods that return a single instance of a class

        ClassName.objects.first() - gets the first record in the table

        ClassName.objects.last() - gets the last record in the table

        ClassName.objects.get(id=1) - gets the record in the table with the specified id
            this method will throw an error unless only and exactly one record matches the query
    
    Methods that return a list of instances of a class

        ClassName.objects.all() - gets all the records in the table

        ClassName.objects.filter(field1="value for field1", etc.) - gets any records matching the query provided

        ClassName.objects.exclude(field1="value for field1", etc.) - gets any records not matching the query provided

# Updating an existing record
    c = ClassName.objects.get(id=1)
    c.field_name = "some new value for field_name"
    c.save()

# Deleting an existing record
    c = ClassName.objects.get(id=1)
    c.delete()

*******************************

# Other helpful methods
    Displaying records
        ClassName.objects.get(id=1).__dict__ - shows all the values of a single record as a dictionary
        ClassName.objects.all().values() - shows all the values of a QuerySet (i.e. multiple instances)
    Ordering records
        ClassName.objects.all().order_by("field_name") - orders by field provided, ascending
        ClassName.objects.all().order_by("-field_name") - orders by field provided, descending

    Filter (WHERE)
        ClassName.objects.filter(field1="value to match", field2="another value", etc.)
    Exclude (WHERE NOT)
        ClassName.objects.exclude(field1="value to match", field2="another value", etc.)

    First
        ClassName.objects.first()
    Last
        ClassName.objects.last()

# Helpful Tip
You've probably noticed in the shell that printing whole objects just results in something like <Movie Object (1)>, which is not particularly helpful. To change how our models display, we can override the __str__ method in the class. This is pretty handy and shows how we can leverage some of Python's magic methods to make our lives easier.

class Movie(models.Model):
    ...
    ...
    ...
    def __str__(self):
        return f"<Movie object: {self.title} ({self.id})>"


